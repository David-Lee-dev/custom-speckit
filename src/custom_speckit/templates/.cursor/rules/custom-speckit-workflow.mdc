---
alwaysApply: false
description: "Custom Speckit workflow rules for version-controlled specifications with delta-based change management. Single source of truth (.specify/specs/spec.md), delta approval process, features history tracking, and constitution compliance enforcement."
tags:
  - speckit
  - specify
  - plan
  - tasks
  - implement
  - delta
  - specification
  - workflow
---

# Custom Speckit Workflow Rules

**CRITICAL**: This project uses a customized Speckit workflow with version-controlled specifications and delta-based change management. You MUST follow these rules strictly when working with specifications, plans, and tasks.

---

## 📁 Directory Structure (MANDATORY)

### Single Source of Truth
- **`.specify/specs/spec.md`** - The ONLY authoritative specification for the entire project
- This is the single source of truth - all AI agents must use this as primary context
- **NEVER** create `specs/{branch}/spec.md` - delta workflow is used instead

### Delta Management (Temporary)
- **`.specify/.specify/.deltas/{branch}/`** - Pending specification changes awaiting approval
  - `delta-spec.md` - Proposed additions, modifications, deletions
  - `changes-summary.md` - Quick overview
  - `review-checklist.md` - Review status
- These are **temporary** - automatically cleaned after approval/rejection
- **DO NOT** commit `.specify/.deltas/` to version control (add to .gitignore)

### Project Skeleton (Permanent, No Versioning)
- **`.specify/specs/`** - Project-wide skeleton files (single source of truth)
  - `spec.md` - Complete feature specification
  - `tech-stack.md` - Technology stack and tools (created/updated as needed)
  - `data-model.md` - Complete data model (entities added/updated as needed)
  - `contracts/` - API contracts (endpoints added/updated as needed)
- These files are **cumulative** - updated without versioning
- Changes tracked via Git and internal change history

### Development History (Permanent, Versioned)
- **`.specify/features/{version}/{YYYY_MM_DD-branch}/`** - Feature implementation records
  - `plan.md` - Implementation plan for this feature ONLY
  - `tasks.md` - Task breakdown for this feature ONLY
- Format: `.specify/features/v1.0.0/2025_10_28-feature-name/`
- These are **permanent** snapshots - commit to version control, never modify after creation

---

## 🔄 Workflow Decision Tree

### First Time Using Speckit (No `.specify/specs/spec.md` exists)

```
1. Run: /speckit.specify "Feature description"
   → Creates: .specify/specs/spec.md (new specification)
   
2. Run: /speckit.plan
   → Creates: .specify/features/{version}/{date}_{branch}/plan.md
   
3. Run: /speckit.tasks
   → Creates: .specify/features/{version}/{date}_{branch}/tasks.md
   
4. Run: /speckit.implement
   → Executes tasks from tasks.md
```

### Modifying Existing Project (`.specify/specs/spec.md` exists)

```
1. Run: /speckit.specify "New feature or change request"
   → Creates: .specify/.deltas/{branch}/delta-spec.md (changes only)
   
2. Run: /speckit.review-delta (RECOMMENDED)
   → Analyzes: delta for issues, conflicts, constitution violations
   
3. Manual review and optional editing:
   → Edit: .specify/.deltas/{branch}/delta-spec.md if needed
   
4. Decision:
   A. Approve: /speckit.approve-delta
      → Merges delta → .specify/specs/spec.md
      → Archives/deletes .specify/.deltas/{branch}/
   
   B. Reject: /speckit.reject-delta
      → Deletes .specify/.deltas/{branch}/
      → .specify/specs/spec.md unchanged
   
5. After approval, continue:
   → /speckit.plan → .specify/features/{version}/{date}_{branch}/plan.md
   → /speckit.tasks → .specify/features/{version}/{date}_{branch}/tasks.md
   → /speckit.implement
```

---

## 🚫 CRITICAL PROHIBITIONS

### NEVER Do These:

1. **NEVER create `specs/{branch}/spec.md`**
   - Only `.specify/specs/spec.md` (single file) should exist
   - Branches are tracked in git, not in specs/ directories

2. **NEVER modify `.specify/specs/spec.md` directly during feature development**
   - Changes must go through delta approval process
   - Exception: First project creation via `/speckit.specify`

3. **NEVER save plan.md or tasks.md to `.specify/specs/` directory**
   - They belong in `.specify/features/{version}/{date}-{branch}/`
   - Example: `.specify/features/v1.0.0/2025_01_20-auth/plan.md`

4. **NEVER skip delta review for existing projects**
   - If `.specify/specs/spec.md` exists, `/speckit.specify` creates delta
   - Delta MUST be approved before proceeding to plan/tasks

5. **NEVER commit `.specify/.deltas/` to version control**
   - These are temporary working files
   - Add to .gitignore

6. **NEVER use old spec paths in commands**
   - ❌ BAD: Read from `specs/{branch}/spec.md`
   - ✅ GOOD: Read from `.specify/specs/spec.md`

---

## ✅ MANDATORY Command Execution Rules

### Rule 1: Always Check for Existing Spec First

Before running `/speckit.specify`, check if `.specify/specs/spec.md` exists:
- **If NO**: New project workflow (create .specify/specs/spec.md directly)
- **If YES**: Delta workflow (create .specify/.deltas/{branch}/)

The command automatically handles this via `compare-specs.sh`.

### Rule 2: Script Execution Order

All commands MUST run these scripts in order:

**For `/speckit.specify`:**
```bash
1. .specify/scripts/bash/compare-specs.sh --json
   → Determines: new project vs delta workflow
```

**For `/speckit.plan`:**
```bash
1. .specify/scripts/bash/compare-specs.sh --json
   → Gets: branch name, delta status
2. .specify/scripts/bash/get-version.sh --json --auto
   → Gets: project version
3. Create directory: .specify/features/{version}/{date}_{branch}/
4. Save files to that directory
```

**For `/speckit.tasks`:**
```bash
1. .specify/scripts/bash/get-version.sh --json --auto
2. .specify/scripts/bash/compare-specs.sh --json
3. Read from: .specify/features/{version}/{date}_{branch}/plan.md
4. Read from: .specify/specs/spec.md (main spec)
5. Save to: .specify/features/{version}/{date}_{branch}/tasks.md
```

### Rule 3: File Reading Priority

When loading context, read files in this priority:

**Primary (ALWAYS):**
1. `.specify/specs/spec.md` - Complete feature specification
2. `.specify/memory/constitution.md` - Project principles

**Project Skeleton (if exists):**
3. `.specify/specs/tech-stack.md` - Technology stack and tools
4. `.specify/specs/data-model.md` - Complete data model
5. `.specify/specs/contracts/` - API contracts

**Feature-Specific (if exists):**
6. `.specify/.deltas/{branch}/delta-spec.md` - Pending changes
7. `.specify/features/{version}/{YYYY_MM_DD-branch}/plan.md` - Current feature's plan
8. `.specify/features/{version}/{YYYY_MM_DD-branch}/tasks.md` - Current feature's tasks

### Rule 4: Save Location Verification

Before saving ANY file, verify the correct location:

| File Type | Correct Location | WRONG Location |
|-----------|------------------|----------------|
| spec.md | `.specify/specs/spec.md` | ❌ `specs/{branch}/spec.md` |
| tech-stack.md | `.specify/specs/tech-stack.md` | ❌ `features/{version}/{date}-{branch}/` |
| data-model.md | `.specify/specs/data-model.md` | ❌ `features/{version}/{date}-{branch}/` |
| contracts/ | `.specify/specs/contracts/` | ❌ `features/{version}/{date}-{branch}/` |
| delta-spec.md | `.specify/.deltas/{branch}/delta-spec.md` | ❌ `.specify/specs/` |
| plan.md | `.specify/features/{version}/{YYYY_MM_DD-branch}/plan.md` | ❌ `specs/` |
| tasks.md | `.specify/features/{version}/{YYYY_MM_DD-branch}/tasks.md` | ❌ `specs/` |

---

## 📋 Delta Workflow Details

### When Delta is Created

Delta is created when:
- `.specify/specs/spec.md` already exists
- User runs `/speckit.specify` with new requirements
- Changes detected compared to existing spec

### Delta Structure

The delta MUST contain:
- **Additions**: New user stories, requirements, sections
- **Modifications**: Changes to existing content (before/after)
- **Deletions**: Removed requirements (with migration path)
- **Impact Analysis**: Affected components, risks, effort
- **Constitution Check**: Compliance verification

### Delta Review Process

1. **Auto-generated delta** → `.specify/.specify/.deltas/{branch}/delta-spec.md`
2. **Run review** → `/speckit.review-delta` (recommended but optional)
3. **Manual editing** → User can edit delta-spec.md directly
4. **Approval decision**:
   - `/speckit.approve-delta` → Merge to .specify/specs/spec.md
   - `/speckit.reject-delta` → Discard changes

### Delta Approval Actions

When approved (`/speckit.approve-delta`):
1. Backup created: `.specify/specs/.backups/spec_backup_{timestamp}_{branch}.md`
2. Delta merged into `.specify/specs/spec.md`
3. Change logged: `.specify/specs/CHANGELOG.md`
4. Delta archived: `.specify/specs/.deltas-archive/{timestamp}_{branch}/` OR deleted
5. Ready for `/speckit.plan`

---

## 🎯 Version Management

### Version Detection Priority

1. Git tags (e.g., `v1.0.0`, `v2.1.3`)
2. `pyproject.toml` (Python projects)
3. `package.json` (Node.js projects)
4. User input (interactive prompt)
5. Default: `v1.0.0` (if --auto flag)

### Feature Directory Naming

Format: `.specify/features/{VERSION}/{YYYY_MM_DD-branch}/`

**Naming Convention**:
- 날짜: 언더스코어(`_`)로 구분 - `YYYY_MM_DD`
- 브랜치명: 하이픈(`-`)으로 구분
- 날짜 목적: 디렉토리 정렬 및 시간순 추적

Examples:
- `.specify/features/v1.0.0/2025_01_20-user-auth/`
- `.specify/features/v1.1.0/2025_02_15-payment/`
- `.specify/features/v2.0.0/2025_03_01-api-redesign/`

Components:
- **VERSION**: From git tag or package.json/pyproject.toml
- **YYYY_MM_DD**: Date when feature branch was created (underscore separated)
- **BRANCH**: Git branch name (e.g., `user-auth`, `payment-integration`)

---

## 🔍 Constitution Compliance

### ALWAYS Check Constitution

Every command MUST verify compliance with `.specify/memory/constitution.md`:
- `/speckit.specify` → Check new requirements
- `/speckit.plan` → Check technical decisions
- `/speckit.review-delta` → Flag violations
- `/speckit.approve-delta` → Block if violations exist

### Constitution Violations are CRITICAL

- **NEVER** approve delta with constitution violations
- **ALWAYS** report violations to user
- **REQUIRE** user to resolve before proceeding

---

## 💡 Best Practices

### For AI Agents

1. **Always run compare-specs.sh first** to determine workflow
2. **Read .specify/specs/spec.md** as primary context (not specs/{branch}/)
3. **Check for delta** before planning (load if exists)
4. **Save to .specify/features/{version}/{date}_{branch}/** for plan/tasks
5. **Verify paths** before writing any file
6. **Log all script executions** for debugging

### For Users

1. **Review deltas** before approval (use `/speckit.review-delta`)
2. **Edit deltas manually** if AI-generated changes need refinement
3. **Keep constitution.md updated** to enforce project standards
4. **Use semantic versioning** in git tags
5. **Commit .specify/features/** to preserve history
6. **Add .specify/.deltas/ to .gitignore**

---

## 🐛 Common Mistakes to Avoid

### Mistake 1: Creating specs/{branch}/spec.md
```
❌ WRONG:
   /speckit.specify → specs/001-feature/spec.md

✅ CORRECT:
   First time: /speckit.specify → .specify/specs/spec.md
   Updates: /speckit.specify → .specify/.deltas/001-feature/delta-spec.md
```

### Mistake 2: Saving plan.md to specs/
```
❌ WRONG:
   /speckit.plan → specs/001-feature/plan.md

✅ CORRECT:
   /speckit.plan → .specify/features/v1.0.0/2025_01_20-feature/plan.md
```

### Mistake 3: Skipping Delta Approval
```
❌ WRONG:
   /speckit.specify → .specify/.deltas/002-auth/delta-spec.md
   /speckit.plan ← ERROR: delta not approved

✅ CORRECT:
   /speckit.specify → .specify/.deltas/002-auth/delta-spec.md
   /speckit.approve-delta → .specify/specs/spec.md updated
   /speckit.plan ← OK
```

### Mistake 4: Reading from Wrong Spec
```
❌ WRONG:
   Read context from: specs/001-feature/spec.md

✅ CORRECT:
   Read context from: .specify/specs/spec.md
   + .specify/.deltas/{branch}/delta-spec.md (if exists)
```

---

## 📊 Workflow State Diagram

```
[New Project]
    ↓
/speckit.specify
    ↓
.specify/specs/spec.md ← Single source of truth created
    ↓
/speckit.plan
    ↓
.specify/features/v1.0.0/2025_01_20-feature/plan.md
    ↓
/speckit.tasks
    ↓
.specify/features/v1.0.0/2025_01_20-feature/tasks.md


[Existing Project]
    ↓
/speckit.specify
    ↓
.specify/.deltas/feature/delta-spec.md ← Temporary changes
    ↓
/speckit.review-delta (optional)
    ↓
Manual review/editing
    ↓
/speckit.approve-delta
    ↓
.specify/specs/spec.md ← Updated (delta merged)
.specify/.deltas/feature/ ← Archived/deleted
    ↓
/speckit.plan
    ↓
.specify/features/v1.1.0/2025_01_22-feature/plan.md
    ↓
/speckit.tasks
    ↓
.specify/features/v1.1.0/2025_01_22-feature/tasks.md
```

---

## 🔒 Enforcement Rules

### BLOCK Execution If:

1. Attempting to create `specs/{branch}/spec.md`
2. Attempting to save plan.md outside `.specify/features/`
3. Attempting to save tasks.md outside `.specify/features/`
4. Running `/speckit.plan` without approving delta (when delta exists)
5. Modifying `.specify/specs/spec.md` directly (not via delta approval)
6. Constitution violations in delta

### WARN User If:

1. `.specify/.deltas/` directory exists (may indicate pending review)
2. Multiple features/ versions detected (clarify which to use)
3. No version found (will default to v1.0.0)
4. Delta is very large (suggest breaking into smaller changes)

---

## 📝 Quick Reference

### Commands in Order

**New Project:**
```
/speckit.specify → /speckit.plan → /speckit.tasks → /speckit.implement
```

**Existing Project:**
```
/speckit.specify → /speckit.review-delta → /speckit.approve-delta → 
/speckit.plan → /speckit.tasks → /speckit.implement
```

### File Locations

```
.specify/
├── specs/                          ← PROJECT SKELETON (no versioning)
│   ├── spec.md                    ← Complete feature specification
│   ├── tech-stack.md              ← Technology stack (cumulative)
│   ├── data-model.md              ← Data model (cumulative)
│   ├── contracts/                 ← API contracts (cumulative)
│   ├── CHANGELOG.md               ← Change history
│   └── .backups/                  ← Auto-generated backups
│
├── .deltas/                        ← TEMPORARY (add to .gitignore)
│   └── {branch}/
│       ├── delta-spec.md
│       ├── changes-summary.md
│       └── review-checklist.md
│
└── features/                       ← FEATURE HISTORY (versioned)
    └── {version}/
        └── {YYYY_MM_DD-branch}/
            ├── plan.md            ← This feature's plan
            └── tasks.md           ← This feature's tasks
```

**Key Principle**: 
- `specs/` = Project-wide skeleton, updated cumulatively
- `features/` = Feature snapshots, never modified after creation

### Scripts to Run

```bash
# Check for existing spec
.specify/scripts/bash/compare-specs.sh --json

# Get project version
.specify/scripts/bash/get-version.sh --json --auto

# Validate delta merge prerequisites
.specify/scripts/bash/merge-delta-spec.sh --json \
  --spec-path .specify/specs/spec.md \
  --delta-path .specify/.deltas/{branch}/delta-spec.md \
  --branch {branch}
```

---

## ⚠️ CRITICAL REMINDERS

1. **.specify/specs/spec.md is the ONLY spec file** - never create specs/{branch}/spec.md
2. **All changes go through delta approval** - never modify .specify/specs/spec.md directly
3. **plan.md and tasks.md live in features/** - never save to specs/
4. **Always check for delta before planning** - load .specify/.deltas/{branch}/ if exists
5. **Always run compare-specs.sh first** - determines new vs existing project
6. **Constitution is non-negotiable** - block violations, don't ignore

---

**Last Updated**: 2025-01-20
**Applies to**: All Speckit commands (/speckit.*)
**Enforcement**: MANDATORY
